par(fig=c(0,0.8,0,0.8), new=TRUE);
plot(x,y);
par(fig=c(0,0.8,0.55,1), new=TRUE);
boxplot(x, horizontal=TRUE, axes=FALSE);
par(fig=c(0.65,1,0,0.8),new=TRUE);
boxplot(y, horizontal=FALSE, axes=FALSE);
dev.off();
x <- rnorm(1000);
y <- x + rnorm(length(x), mean = 0.1);
par(fig=c(0,0.8,0,0.8), new=TRUE);
plot(x,y);
par(fig=c(0,0.8,0.55,1), new=TRUE);
boxplot(x, horizontal=TRUE, axes=FALSE);
par(fig=c(0.65,1,0,0.8),new=TRUE);
boxplot(y, horizontal=FALSE, axes=FALSE);
dev.off();
x <- rnorm(1000);
y <- x + rnorm(length(x), mean = 0.1);
par(fig=c(0,0.8,0,0.8), new=TRUE);
plot(x,y);
par(fig=c(0,0.8,0.55,1), new=TRUE);
boxplot(x, horizontal=TRUE, axes=FALSE);
par(fig=c(0.65,1,0,0.8),new=TRUE);
boxplot(y, horizontal=FALSE, axes=FALSE);
dev.off();
x <- rnorm(1000);
y <- x + rnorm(length(x), mean = 0.1);
par(fig=c(0,0.8,0,0.8), new=TRUE);
plot(x,y);
par(fig=c(0,0.8,0.55,1), new=TRUE);
boxplot(x, horizontal=TRUE, axes=FALSE);
par(fig=c(0.65,1,0,0.8),new=TRUE);
boxplot(y, horizontal=FALSE, axes=FALSE);
dev.off();
x <- rnorm(1000);
y <- x + rnorm(length(x), mean = 0.1);
par(fig=c(0,0.8,0,0.8), new=TRUE);
plot(x,y);
par(fig=c(0,0.8,0.55,1), new=TRUE);
boxplot(x, horizontal=TRUE, axes=FALSE);
par(fig=c(0.65,1,0,0.8),new=TRUE);
boxplot(y, horizontal=FALSE, axes=FALSE);
dev.off();
x <- rnorm(1000);
y <- x + rnorm(length(x), mean = 0.1);
par(fig=c(0,0.8,0,0.8), new=TRUE);
plot(x,y);
par(fig=c(0,0.8,0.55,1), new=TRUE);
boxplot(x, horizontal=TRUE, axes=FALSE);
par(fig=c(0.65,1,0,0.8),new=TRUE);
boxplot(y, horizontal=FALSE, axes=FALSE);
dev.off();
x <- rnorm(1000);
y <- x + rnorm(length(x), mean = 0.1);
par(fig=c(0,0.8,0,0.8), new=TRUE);
plot(x,y);
par(fig=c(0,0.8,0.55,1), new=TRUE);
boxplot(x, horizontal=TRUE, axes=FALSE);
par(fig=c(0.65,1,0,0.8),new=TRUE);
boxplot(y, horizontal=FALSE, axes=FALSE);
dev.off();
x <- rnorm(1000);
y <- x + rnorm(length(x), mean = 0.1);
par(fig=c(0,0.8,0,0.8), new=TRUE);
plot(x,y);
par(fig=c(0,0.8,0.55,1), new=TRUE);
boxplot(x, horizontal=TRUE, axes=FALSE);
par(fig=c(0.65,1,0,0.8),new=TRUE);
boxplot(y, horizontal=FALSE, axes=FALSE);
dev.off();
x <- rnorm(1000);
y <- x + rnorm(length(x), mean = 0.1);
par(fig=c(0,0.8,0,0.8), new=TRUE);
plot(x,y);
par(fig=c(0,0.8,0.55,1), new=TRUE);
boxplot(x, horizontal=TRUE, axes=FALSE);
par(fig=c(0.65,1,0,0.8),new=TRUE);
boxplot(y, horizontal=FALSE, axes=FALSE);
dev.off();
x <- rnorm(1000);
y <- x + rnorm(length(x), mean = 0.1);
par(fig=c(0,0.8,0,0.8), new=TRUE);
plot(x,y);
par(fig=c(0,0.8,0.55,1), new=TRUE);
boxplot(x, horizontal=TRUE, axes=FALSE);
par(fig=c(0.65,1,0,0.8),new=TRUE);
boxplot(y, horizontal=FALSE, axes=FALSE);
dev.off();
x <- rnorm(1000);
y <- x + rnorm(length(x), mean = 0.1);
par(fig=c(0,0.8,0,0.8), new=TRUE);
plot(x,y);
par(fig=c(0,0.8,0.55,1), new=TRUE);
boxplot(x, horizontal=TRUE, axes=FALSE);
par(fig=c(0.65,1,0,0.8),new=TRUE);
boxplot(y, horizontal=FALSE, axes=FALSE);
dev.off();
x <- rnorm(1000);
y <- x + rnorm(length(x), mean = 0.1);
par(fig=c(0,0.8,0,0.8), new=TRUE);
plot(x,y, col="red");
par(fig=c(0,0.8,0.55,1), new=TRUE);
boxplot(x, horizontal=TRUE, axes=FALSE);
par(fig=c(0.65,1,0,0.8),new=TRUE);
boxplot(y, horizontal=FALSE, axes=FALSE);
?plot
dev.off();
x <- rnorm(1000);
y <- x + rnorm(length(x), mean = 0.1);
par(fig=c(0,0.8,0,0.8), new=TRUE);
plot(x,y, col="red", type = "h");
par(fig=c(0,0.8,0.55,1), new=TRUE);
boxplot(x, horizontal=TRUE, axes=FALSE);
par(fig=c(0.65,1,0,0.8),new=TRUE);
boxplot(y, horizontal=FALSE, axes=FALSE);
dev.off();
x <- rnorm(1000);
y <- x + rnorm(length(x), mean = 0.1);
par(fig=c(0,0.8,0,0.8), new=TRUE);
plot(x,y, col="red", type = "p");
par(fig=c(0,0.8,0.55,1), new=TRUE);
boxplot(x, horizontal=TRUE, axes=FALSE);
par(fig=c(0.65,1,0,0.8),new=TRUE);
boxplot(y, horizontal=FALSE, axes=FALSE);
dir()
pnorm(84, mean=72, sd=15.2, lower.tail=FALSE)
pnorm(c(1,2,3,4), mean=72, sd=15.2, lower.tail=FALSE)
pnorm(1, mean=72, sd=15.2, lower.tail=FALSE)
pnorm(c(1,2,3,4), mean=72, sd=15.2, lower.tail=FALSE)
source('C:/Users/arxwn/Desktop/clean-project/run_analysis.R')
require("data.table");
require("reshape2");
setwd("C:\\Users\\arxwn\\Desktop\\clean-project")
currentDir <- getwd();
dataRootDir <- file.path(currentDir, "UCI HAR Dataset");
## This is a safest way of reading
## a table file, it ensures file endings dont crash the
## reading process
readDataTable <- function(filename){
dataFile <- read.table(filename);
dataTable <- data.table(dataFile);
return(dataTable);
}
## Read the required files
testY <- readDataTable(file.path(dataRootDir, "test", "Y_test.txt"));
trainY <- readDataTable(file.path(dataRootDir, "train", "Y_train.txt"));
testX <- readDataTable(file.path(dataRootDir, "test", "X_test.txt"));
trainX <- readDataTable(file.path(dataRootDir, "train", "X_train.txt"));
subjectTest <- readDataTable(file.path(dataRootDir, "test", "subject_test.txt"));
subjectTrain <- readDataTable(file.path(dataRootDir, "train", "subject_train.txt"));
## Merge training and tests sets
dataTableActivityY <- rbind(testY, trainY);
dataTableActivityX <- rbind(testX, trainX);
dataTableSubject <- rbind(subjectTest, subjectTrain);
## Give better names
setnames(dataTableSubject, "V1", "subject");
setnames(dataTableActivityY, "V1", "activity");
## Merge collumns
dataTableSubject <- cbind(dataTableSubject, dataTableActivityY, dataTableActivityX);
## Extract mean and standard deviation
#dataTableFeatures <-
dataTableFeatures <- fread(file.path(dataRootDir, "features.txt"))
dataTableFeatures
class(dataTableFeatures)
names(dataTableFeatures)
## Extract mean and standard deviation
## Get which variables are measurements for the mean and standard deviation
dataTableFeatures <- fread(file.path(dataRootDir, "features.txt"))
setnames(dataTableFeatures, names(dataTableFeatures), c("featureNumber", "featureName"))
## Get the working subset for our purposes
dataTableFeatures <- dataTableFeatures[grepl("mean\\(\\)|std\\(\\)", featureName)]
dataTableFeatures
dataTableFeatures <- fread(file.path(dataRootDir, "features.txt"))
setnames(dataTableFeatures, names(dataTableFeatures), c("featureNumber", "featureName"))
dataTableFeatures
## Get the working subset for our purposes
dataTableFeatures <- dataTableFeatures[grepl("mean\\(\\)|std\\(\\)", featureName)]
## Convert column numbers to a vector of variable names
dataTableFeatures$featureCode <- dataTableFeatures[, paste0("V", featureNumber)]
dataTableFeatures$featureCode
dataTableActivityY <- rbind(testY, trainY);
dataTableActivityX <- rbind(testX, trainX);
dataTableSubject <- rbind(subjectTest, subjectTrain);
## Give better names
setnames(dataTableSubject, "V1", "subject");
setnames(dataTableActivityY, "V1", "activity");
## Merge collumns
dataTableSubject <- cbind(dataTableSubject, dataTableActivityY, dataTableActivityX);
## Extract mean and standard deviation
## Get which variables are measurements for the mean and standard deviation
dataTableFeatures <- fread(file.path(dataRootDir, "features.txt"))
setnames(dataTableFeatures, names(dataTableFeatures), c("featureNumber", "featureName"))
## Get the working subset for our purposes
dataTableFeatures <- dataTableFeatures[grepl("mean\\(\\)|std\\(\\)", featureName)]
## Convert column numbers to a vector of variable names
## Subset these variables using their names
dataTableFeatures$featureCode <- dataTableFeatures[, paste0("V", featureNumber)]
select <- c(key(dataTableSubject), dataTableFeatures$featureCode);
dataTableSubject <- dataTableSubject[, select, with=FALSE];
dataTableSubject
source('C:/Users/arxwn/Desktop/clean-project/run_analysis.R')
setnames(dataTableActivityLabels, names(dataTableActivityLabels), c("activityNumber","activityLabel"));
#########################################################3
## Label data with descriptive names
dataTableSubject <- merge(dataTableSubject, dataTableActivityLabels, by="activityNumber", all.x=TRUE)
# add activityLabel as a key
setkey(dataTableSubject, subject, activityNumber, activityLabel);
# flip data rows and columns
keydataTableSubject <- key(dataTableSubject);
dataTableSubject <- data.table(melt(dataTableSubject, keydataTableSubject, variable.name="featureCode"))
require("data.table");
require("reshape2");
setwd("C:\\Users\\arxwn\\Desktop\\clean-project")
currentDir <- getwd();
dataRootDir <- file.path(currentDir, "UCI HAR Dataset");
## This is a safest way of reading
## a table file, it ensures file endings dont crash the
## reading process
readDataTable <- function(filename){
dataFile <- read.table(filename);
dataTable <- data.table(dataFile);
return(dataTable);
}
#########################################################
## Read the required files
testY <- readDataTable(file.path(dataRootDir, "test", "Y_test.txt"));
trainY <- readDataTable(file.path(dataRootDir, "train", "Y_train.txt"));
testX <- readDataTable(file.path(dataRootDir, "test", "X_test.txt"));
trainX <- readDataTable(file.path(dataRootDir, "train", "X_train.txt"));
subjectTest <- readDataTable(file.path(dataRootDir, "test", "subject_test.txt"));
subjectTrain <- readDataTable(file.path(dataRootDir, "train", "subject_train.txt"));
## Merge training and tests sets
dataTableActivityY <- rbind(testY, trainY);
dataTableActivityX <- rbind(testX, trainX);
dataTableSubject <- rbind(subjectTest, subjectTrain);
## Give better names
setnames(dataTableSubject, "V1", "subject");
setnames(dataTableActivityY, "V1", "activity");
## Merge collumns
dataTableSubject <- cbind(dataTableSubject, dataTableActivityY, dataTableActivityX);
#########################################################
## Extract mean and standard deviation
## Get which variables are measurements for the mean and standard deviation
dataTableFeatures <- fread(file.path(dataRootDir, "features.txt"))
setnames(dataTableFeatures, names(dataTableFeatures), c("featureNumber", "featureName"))
## Get the working subset for our purposes
dataTableFeatures <- dataTableFeatures[grepl("mean\\(\\)|std\\(\\)", featureName)]
## Convert column numbers to a vector of variable names
## Subset these variables using their names
dataTableFeatures$featureCode <- dataTableFeatures[, paste0("V", featureNumber)]
select <- c(key(dataTableSubject), dataTableFeatures$featureCode);
dataTableSubject <- dataTableSubject[, select, with=FALSE];
dataTableActivityLabels <- fread(file.path(dataRootDir, "activity_labels.txt"))
setnames(dataTableActivityLabels, names(dataTableActivityLabels), c("activityNumber","activityName"));
#########################################################3
## Label data with descriptive names
dataTableSubject <- merge(dataTableSubject, dataTableActivityLabels, by="activityNumber", all.x=TRUE)
# add activityLabel as a key
setkey(dataTableSubject, subject, activityNumber, activityLabel);
# flip data rows and columns
keydataTableSubject <- key(dataTableSubject);
dataTableSubject <- data.table(melt(dataTableSubject, keydataTableSubject, variable.name="featureCode"))
dataTableSubject <- merge(dataTableSubject, dataTableFeatures[, list(featureNumber, featureCode, featureName)], by="featureCode", all.x=TRUE)
require("data.table");
require("reshape2");
setwd("C:\\Users\\arxwn\\Desktop\\clean-project")
currentDir <- getwd();
dataRootDir <- file.path(currentDir, "UCI HAR Dataset");
## This is a safest way of reading
## a table file, it ensures file endings dont crash the
## reading process
readDataTable <- function(filename){
dataFile <- read.table(filename);
dataTable <- data.table(dataFile);
return(dataTable);
}
#########################################################
## Read the required files
testY <- readDataTable(file.path(dataRootDir, "test", "Y_test.txt"));
trainY <- readDataTable(file.path(dataRootDir, "train", "Y_train.txt"));
testX <- readDataTable(file.path(dataRootDir, "test", "X_test.txt"));
trainX <- readDataTable(file.path(dataRootDir, "train", "X_train.txt"));
subjectTest <- readDataTable(file.path(dataRootDir, "test", "subject_test.txt"));
subjectTrain <- readDataTable(file.path(dataRootDir, "train", "subject_train.txt"));
## Merge training and tests sets
dataTableActivityY <- rbind(testY, trainY);
dataTableActivityX <- rbind(testX, trainX);
dataTableSubject <- rbind(subjectTest, subjectTrain);
## Give better names
setnames(dataTableSubject, "V1", "subject");
setnames(dataTableActivityY, "V1", "activity");
## Merge collumns
dataTableSubject <- cbind(dataTableSubject, dataTableActivityY, dataTableActivityX);
#########################################################
## Extract mean and standard deviation
## Get which variables are measurements for the mean and standard deviation
dataTableFeatures <- fread(file.path(dataRootDir, "features.txt"))
setnames(dataTableFeatures, names(dataTableFeatures), c("featureNumber", "featureName"))
## Get the working subset for our purposes
dataTableFeatures <- dataTableFeatures[grepl("mean\\(\\)|std\\(\\)", featureName)]
## Convert column numbers to a vector of variable names
## Subset these variables using their names
dataTableFeatures$featureCode <- dataTableFeatures[, paste0("V", featureNumber)]
select <- c(key(dataTableSubject), dataTableFeatures$featureCode);
dataTableSubject <- dataTableSubject[, select, with=FALSE];
dataTableActivityLabels <- fread(file.path(dataRootDir, "activity_labels.txt"))
setnames(dataTableActivityLabels, names(dataTableActivityLabels), c("activityNumber","activityName"));
#########################################################3
## Label data with descriptive names
dataTableSubject <- merge(dataTableSubject, dataTableActivityLabels, by="activityNumber", all.x=TRUE)
# add activityLabel as a key
setkey(dataTableSubject, subject, activityNumber, activityLabel);
# flip data rows and columns
keydataTableSubject <- key(dataTableSubject);
dataTableSubject <- data.table(melt(dataTableSubject, keydataTableSubject, variable.name="featureCode"))
dataTableSubject <- merge(dataTableSubject, dataTableFeatures[, list(featureNumber, featureCode, featureName)], by="featureCode", all.x=TRUE)
dataTableSubject$activity <- factor(dataTableSubject$activityName)
dataTableSubject$feature <- factor(dataTableSubject$featureName)
## Separate features from featureName
grepFeature <- function (regex) {
return(grepl(regex, dataTableSubject$feature))
}
## Features with 2 categories
n <- 2
y <- matrix(seq(1, n), nrow=n)
x <- matrix(c(grepFeature("^t"), grepFeature("^f")), ncol=nrow(y))
dataTableSubject$featDomain <- factor(x %*% y, labels=c("Time", "Freq"))
x <- matrix(c(grepFeature("Acc"), grepFeature("Gyro")), ncol=nrow(y))
dataTableSubject$featInstrument <- factor(x %*% y, labels=c("Accelerometer", "Gyroscope"))
x <- matrix(c(grepFeature("BodyAcc"), grepFeature("GravityAcc")), ncol=nrow(y))
dataTableSubject$featAcceleration <- factor(x %*% y, labels=c(NA, "Body", "Gravity"))
x <- matrix(c(grepFeature("mean()"), grepFeature("std()")), ncol=nrow(y))
dataTableSubject$featVariable <- factor(x %*% y, labels=c("Mean", "SD"))
## Features with 1 category
dataTableSubject$featJerk <- factor(grepFeature("Jerk"), labels=c(NA, "Jerk"))
dataTableSubject$featMagnitude <- factor(grepFeature("Mag"), labels=c(NA, "Magnitude"))
## Features with 3 categories
n <- 3
y <- matrix(seq(1, n), nrow=n)
x <- matrix(c(grepFeature("-X"), grepFeature("-Y"), grepFeature("-Z")), ncol=nrow(y))
dataTableSubject$featAxis <- factor(x %*% y, labels=c(NA, "X", "Y", "Z"))
source('C:/Users/arxwn/Desktop/clean-project/run_analysis.R')
dataTableActivityLabels
dataTableSubject
source('C:/Users/arxwn/Desktop/clean-project/run_analysis.R')
dataTableSubject
dataTableActivityY
dataTableActivityY <- rbind(testY, trainY);
dataTableActivityX <- rbind(testX, trainX);
dataTableTmpSubject <- rbind(subjectTest, subjectTrain);
## Give better names
setnames(dataTableTmpSubject, "V1", "subject");
setnames(dataTableActivityY, "V1", "activityNumber");
## Merge collumns
dataTableSubject <- cbind(dataTableTmpSubject, dataTableActivityY, dataTableActivityX);
dataTableSubject
dataTableTmpSubject
dataTableActivityY
dataTableActivityX
dataTableSubject <- cbind(dataTableTmpSubject, dataTableActivityY, dataTableActivityX);
View(dataTableSubject)
## Extract mean and standard deviation
## Get which variables are measurements for the mean and standard deviation
dataTableFeatures <- fread(file.path(dataRootDir, "features.txt"))
setnames(dataTableFeatures, names(dataTableFeatures), c("featureNumber", "featureName"))
## Get the working subset for our purposes
dataTableFeatures <- dataTableFeatures[grepl("mean\\(\\)|std\\(\\)", featureName)]
## Convert column numbers to a vector of variable names
## Subset these variables using their names
dataTableFeatures$featureCode <- dataTableFeatures[, paste0("V", featureNumber)]
select <- c(key(dataTableSubject), dataTableFeatures$featureCode);
dataTableSubject <- dataTableSubject[, select, with=FALSE];
dataTableActivityLabels <- fread(file.path(dataRootDir, "activity_labels.txt"))
setnames(dataTableActivityLabels, names(dataTableActivityLabels), c("activityNumber","activityName"));
#########################################################3
## Label data with descriptive names
dataTableSubject <- merge(dataTableSubject, dataTableActivityLabels, by="activityNumber", all.x=TRUE)
# add activityLabel as a key
setkey(dataTableSubject, subject, activityNumber, activityLabel);
# flip data rows and columns
keydataTableSubject <- key(dataTableSubject);
dataTableSubject <- data.table(melt(dataTableSubject, keydataTableSubject, variable.name="featureCode"))
dataTableSubject <- merge(dataTableSubject, dataTableFeatures[, list(featureNumber, featureCode, featureName)], by="featureCode", all.x=TRUE)
dataTableSubject$activity <- factor(dataTableSubject$activityName)
dataTableSubject$feature <- factor(dataTableSubject$featureName)
## Separate features from featureName
grepFeature <- function (regex) {
return(grepl(regex, dataTableSubject$feature))
}
## Features with 2 categories
n <- 2
y <- matrix(seq(1, n), nrow=n)
x <- matrix(c(grepFeature("^t"), grepFeature("^f")), ncol=nrow(y))
dataTableSubject$featDomain <- factor(x %*% y, labels=c("Time", "Freq"))
x <- matrix(c(grepFeature("Acc"), grepFeature("Gyro")), ncol=nrow(y))
dataTableSubject$featInstrument <- factor(x %*% y, labels=c("Accelerometer", "Gyroscope"))
x <- matrix(c(grepFeature("BodyAcc"), grepFeature("GravityAcc")), ncol=nrow(y))
dataTableSubject$featAcceleration <- factor(x %*% y, labels=c(NA, "Body", "Gravity"))
x <- matrix(c(grepFeature("mean()"), grepFeature("std()")), ncol=nrow(y))
dataTableSubject$featVariable <- factor(x %*% y, labels=c("Mean", "SD"))
## Features with 1 category
dataTableSubject$featJerk <- factor(grepFeature("Jerk"), labels=c(NA, "Jerk"))
dataTableSubject$featMagnitude <- factor(grepFeature("Mag"), labels=c(NA, "Magnitude"))
## Features with 3 categories
n <- 3
y <- matrix(seq(1, n), nrow=n)
x <- matrix(c(grepFeature("-X"), grepFeature("-Y"), grepFeature("-Z")), ncol=nrow(y))
dataTableSubject$featAxis <- factor(x %*% y, labels=c(NA, "X", "Y", "Z"))
#########################################################
## Create a tidy data set
setkey(dataTableSubject, subject, activity, featDomain, featAcceleration, featInstrument, featJerk, featMagnitude, featVariable, featAxis)
dataTableTidy <- dataTableSubject[, list(count = .N, average = mean(value)), by=key(dataTableSubject)]
dataTableSubject <- cbind(dataTableTmpSubject, dataTableActivityY, dataTableActivityX);
#########################################################
## Extract mean and standard deviation
## Get which variables are measurements for the mean and standard deviation
dataTableFeatures <- fread(file.path(dataRootDir, "features.txt"))
setnames(dataTableFeatures, names(dataTableFeatures), c("featureNumber", "featureName"))
## Get the working subset for our purposes
dataTableFeatures <- dataTableFeatures[grepl("mean\\(\\)|std\\(\\)", featureName)]
## Convert column numbers to a vector of variable names
## Subset these variables using their names
dataTableFeatures$featureCode <- dataTableFeatures[, paste0("V", featureNumber)]
select <- c(key(dataTableSubject), dataTableFeatures$featureCode);
dataTableSubject <- dataTableSubject[, select, with=FALSE];
dataTableActivityLabels <- fread(file.path(dataRootDir, "activity_labels.txt"))
setnames(dataTableActivityLabels, names(dataTableActivityLabels), c("activityNumber","activityName"));
#########################################################3
## Label data with descriptive names
dataTableSubject <- merge(dataTableSubject, dataTableActivityLabels, by="activityNumber", all.x=TRUE)
# add activityLabel as a key
setkey(dataTableSubject, subject, activityNumber, activityLabel);
# flip data rows and columns
keydataTableSubject <- key(dataTableSubject);
dataTableSubject <- data.table(melt(dataTableSubject, keydataTableSubject, variable.name="featureCode"))
dataTableSubject <- merge(dataTableSubject, dataTableFeatures[, list(featureNumber, featureCode, featureName)], by="featureCode", all.x=TRUE)
dataTableSubject$activity <- factor(dataTableSubject$activityName)
dataTableSubject$feature <- factor(dataTableSubject$featureName)
## Separate features from featureName
grepFeature <- function (regex) {
return(grepl(regex, dataTableSubject$feature))
}
## Features with 2 categories
n <- 2
y <- matrix(seq(1, n), nrow=n)
x <- matrix(c(grepFeature("^t"), grepFeature("^f")), ncol=nrow(y))
dataTableSubject$featDomain <- factor(x %*% y, labels=c("Time", "Freq"))
x <- matrix(c(grepFeature("Acc"), grepFeature("Gyro")), ncol=nrow(y))
dataTableSubject$featInstrument <- factor(x %*% y, labels=c("Accelerometer", "Gyroscope"))
x <- matrix(c(grepFeature("BodyAcc"), grepFeature("GravityAcc")), ncol=nrow(y))
dataTableSubject$featAcceleration <- factor(x %*% y, labels=c(NA, "Body", "Gravity"))
x <- matrix(c(grepFeature("mean()"), grepFeature("std()")), ncol=nrow(y))
dataTableSubject$featVariable <- factor(x %*% y, labels=c("Mean", "SD"))
## Features with 1 category
dataTableSubject$featJerk <- factor(grepFeature("Jerk"), labels=c(NA, "Jerk"))
dataTableSubject$featMagnitude <- factor(grepFeature("Mag"), labels=c(NA, "Magnitude"))
## Features with 3 categories
n <- 3
y <- matrix(seq(1, n), nrow=n)
x <- matrix(c(grepFeature("-X"), grepFeature("-Y"), grepFeature("-Z")), ncol=nrow(y))
dataTableSubject$featAxis <- factor(x %*% y, labels=c(NA, "X", "Y", "Z"))
#########################################################
## Create a tidy data set
setkey(dataTableSubject, subject, activity, featDomain, featAcceleration, featInstrument, featJerk, featMagnitude, featVariable, featAxis)
dataTableTidy <- dataTableSubject[, list(count = .N, average = mean(value)), by=key(dataTableSubject)]
?setkey
dataTableSubject
dataTableTidy <- dataTableSubject[, list(count = .N, average = mean(value)), by=key(dataTableSubject)];
dataTableTidy
key(dataTableSubject)
keys(dataTableSubject)
key(dataTableSubject)
dataTableSubject
source('C:/Users/arxwn/Desktop/clean-project/run_analysis.R')
dataTableSubject
View(dataTableSubject)
dataTableTmpSubject
dataTableActivityY
dataTableActivityX
dataTableSubject <- cbind(dataTableTmpSubject, dataTableActivityY, dataTableActivityX);
dataTableSubject$activityNumber
source('C:/Users/arxwn/Desktop/clean-project/run_analysis.R')
dataTableSubject
## Read the required files
testX <- readDataTable(file.path(dataRootDir, "test", "X_test.txt"));
trainX <- readDataTable(file.path(dataRootDir, "train", "X_train.txt"));
testY <- fread(file.path(dataRootDir, "test", "Y_test.txt"));
trainY <- fread(file.path(dataRootDir, "train", "Y_train.txt"));
subjectTest <- fread(file.path(dataRootDir, "test", "subject_test.txt"));
subjectTrain <- fread(file.path(dataRootDir, "train", "subject_train.txt"));
## Merge training and tests sets
dataTableActivityY <- rbind(testY, trainY);
dataTableActivityX <- rbind(testX, trainX);
dataTableTmpSubject <- rbind(subjectTest, subjectTrain);
## Give better names
setnames(dataTableTmpSubject, "V1", "subject");
setnames(dataTableActivityY, "V1", "activityNumber");
## Merge collumns
dataTableSubject <- cbind(dataTableTmpSubject, dataTableActivityY, dataTableActivityX);
view(dataTableSubject)
View(dataTableSubject)
setnames(dataTableFeatures, names(dataTableFeatures), c("featureNumber", "featureName"))
dataTableFeatures$featureCode <- dataTableFeatures[, paste0("V", featureNumber)]
select <- c(key(dataTableSubject), dataTableFeatures$featureCode);
select
source('C:/Users/arxwn/Desktop/clean-project/run_analysis.R')
source('C:/Users/arxwn/Desktop/clean-project/run_analysis.R')
source('C:/Users/arxwn/Desktop/clean-project/run_analysis.R')
dataTableTidy
View(dataTableTidy)
write.table(dataTableTidy,file = "tidyData.dt");
write.table(dataTableTidy,file = "tidyDatast.txt", row.name = FALSE);
